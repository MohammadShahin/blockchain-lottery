import Head from 'next/head'
import React from 'react'
import styles from '../styles/Home.module.css'
import { useAccount, useConnect, useDisconnect, useContract, useSigner } from 'wagmi'
// import { calculatorAbi } from '../src/abi'
import { Contract, ethers } from 'ethers'
import { useToast, Button, Select, Input, Text, Flex, Box, Heading, Center } from '@chakra-ui/react'
import { deployContract, min } from '../src/utils'
import { abi, bytecode } from '../src/constants'

// 0x6354481AaE43C1A355b4a5d84f1BfcE726663481
const maxChar = 50;

export default function Home() {

  // Wagmi
  const { address, isConnected } = useAccount()
  const { data: signer } = useSigner()
  const { connect, connectors } = useConnect()
  const { disconnect } = useDisconnect()

  // Lottery logic
  const [contract, setContract] = React.useState<Contract | null>(null)
  // const [errorMessage, setErrorMessage] = React.useState('')
  const [managerAddress, setManagerAddress] = React.useState('')
  const [players, setPlayers] = React.useState<string[]>([])

  // Lottery creation / importing
  const [lotteryType, setLotteryType] = React.useState('')
  const [newLotteryAddress, setNewLotteryAddress] = React.useState('')

  // UI
  const toast = useToast()

  React.useEffect(() => {
    const updateManger = async () => {
      if (!contract){
        setManagerAddress('')
      }
      else{
        const manager = await contract.manager()
        setManagerAddress(manager)
      }
    }

    updateManger()
  }, [contract])

  React.useEffect(() => {
    disconnect()
  }, [])

  const handleEnterLottery = async () => {
    try {
      if (!contract) throw new Error("Contract is not provided");
      
      const tx = await contract.enter({ value: ethers.utils.parseEther("0.011") })
      await tx.wait()
      handleUpdatePlayers()
    }
    catch (e) {
      let _errorMessage = '';
      if (typeof e === "string") {
        _errorMessage = e.toUpperCase()
      } else if (e instanceof Error) {
        _errorMessage = e.message // works, `e` narrowed to Error
      }

      toast({
        title: 'Entering lottery failed.',
        description: `Failure message: ${_errorMessage.slice(0, min(maxChar, _errorMessage.length))}`,
        status: 'error',
        duration: 5000,
        isClosable: true,
      })
    }
  }

  const handleUpdatePlayers = async () => {
    if (!contract) return
    const players = await contract.getPlayers()
    setPlayers(players)
  }

  const handlePickWinner = async () => {
    try {
      if (!contract) return
      const tx = await contract.pickWinner()
      await tx.wait()
      handleUpdatePlayers()
    } catch (e) {
      let _errorMessage = "";
      if (typeof e === "string") {
        _errorMessage = e.toUpperCase()
      } else if (e instanceof Error) {
        _errorMessage = e.message // works, `e` narrowed to Error
      }

      toast({
        title: 'Error in picking winner.',
        description: `Failure message: ${_errorMessage.slice(0, min(maxChar, _errorMessage.length))}`,
        status: 'error',
        duration: 5000,
        isClosable: true,
      })
    }
  }

  const createNewLottery = async () => {
    try {
      if (!signer) throw new Error("No available signer");

      const newContract = await deployContract(abi, bytecode, signer)
      setContract(newContract)
    }
    catch (e) {
      let _errorMessage = "";
      if (typeof e === "string") {
        _errorMessage = e.toUpperCase()
      } else if (e instanceof Error) {
        _errorMessage = e.message // works, `e` narrowed to Error
      }

      toast({
        title: 'Lottery creation failed.',
        description: `Failure message: ${_errorMessage.slice(0, min(maxChar, _errorMessage.length))}`,
        status: 'error',
        duration: 5000,
        isClosable: true,
      })
    }
  }

  const importLottery = async () => {
    try {

      if (!signer) throw new Error("No available signer");

      const newContract = new Contract(newLotteryAddress, abi, signer)
      setContract(newContract)
    } catch (e) {
      let _errorMessage = "";
      if (typeof e === "string") {
        _errorMessage = e.toUpperCase()
      } else if (e instanceof Error) {
        _errorMessage = e.message // works, `e` narrowed to Error
      }

      toast({
        title: 'Lottery import failed.',
        description: `Failure message: ${_errorMessage.slice(0, min(maxChar, _errorMessage.length))}`,
        status: 'error',
        duration: 5000,
        isClosable: true,
      })
    }
  }

  return (
    <Box p="0 2rem">
      <Head>
        <title>Lottery</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>

        {isConnected ? !!contract ?
          <React.Fragment>
            <Heading as='h1' fontSize={"4rem"} lineHeight="1.1">
              Welcome to <span className={styles.blue}>Blockchain Lottery</span>
            </Heading>

            <Heading mt='10'>
              The address of the lottery is <span className={styles.blue}>{contract.address}</span>
            </Heading>

            <Heading mt='10'>
              The manager of the lottery is <span className={styles.blue}>{managerAddress}</span>
            </Heading>

            <Heading mt='10' mb="10">
              Your address: <span className={styles.blue}>{address}</span>
            </Heading>

            <Flex flexDir={'column'} gap="5" alignItems='center'>
              <Button w={200} onClick={handleEnterLottery}>Enter lottery</Button>
              <Text>
                Only the manager can pick winner. All ether will be sent to the winner.
              </Text>
              <Button w={200} onClick={handlePickWinner}>Pick winner</Button>
            </Flex>

            <Flex flexDir='column' gap={5} alignItems={'center'}>
              <Text>
                [{players}]
              </Text>

              <Button w={200}  onClick={handleUpdatePlayers}>Update</Button>
            </Flex>

            {/* 
            <p className={styles.description}>
              Choose the operands X and Y and the type of operation. <br />
              The Calculator works only for positive integers. <br />
              Your address is {address}
            </p>

            <form className={styles.inputs} onSubmit={handleSubmit}>

              <div className={styles.flexRow}>
                <div className={styles.flexColumn}>
                  <label htmlFor="operand-X">X</label>
                  <input id="operand-X" type={'number'} name={'operand-X'} value={valueX} onChange={(e) => setValueX(parseInt(e.target.value))} />
                </div>

                <div className={styles.flexColumn}>
                  <label htmlFor="operand-Y">Y</label>
                  <input id="operand-Y" type={'number'} name={'operand-Y'} value={valueY} onChange={(e) => setValueY(parseInt(e.target.value))} />
                </div>

              </div>

              <div className={styles.flexColumn}>
                <label htmlFor="operation">Operation</label>
                <select id="cars" name="cars" value={operationType} onChange={e => setOperationType(e.target.value)}>
                  {OPERTION_TYPES.map(option => (
                    <option key={option} value={option}>{option}</option>
                  ))}
                </select>
              </div>

              <input type='submit' value="Find Result" />
            </form>

            <div id={styles.result}>
              {
                errorMessage ? (
                  <span className={styles.red}>Operation not completed. The reason: {errorMessage}</span>
                ) : typeof operationResult !== 'undefined' ? (
                  <span className={styles.green}>The result is {operationResult}</span>
                ) : (
                  <span>Choose operands and operation then click the &apos; Find Result &apos; Button.</span>
                )
              }
            </div> */}
          </React.Fragment> :
          <React.Fragment>
            <Heading fontSize={"4rem"} lineHeight="1.1">
              Welcome to <span className={styles.blue}>Blockchain Lottery</span>
            </Heading>
            <h2 className={styles.description}>
              Your address: <span className={styles.blue}>{address}</span>
            </h2>

            <p className={styles.description}>
              Create your own lottery or connect to an old one.
            </p>

            <Select w='200' placeholder='Select option' value={lotteryType} onChange={(e) => setLotteryType(e.target.value)}>
              <option value='alreadyDeployedLottery'>Already deployed Lottery</option>
              <option value='newLottery'>New Lottery</option>
            </Select>
            {lotteryType === 'alreadyDeployedLottery' ? <div>
              <Text mt={10}>
                Input Lottery Address
              </Text>
              <Flex flexDirection={'column'}>
                <Input mt={10} placeholder='0xXXX...' value={newLotteryAddress} />
                <Button ml={'auto'} mr={'auto'} mt={10} onClick={importLottery}>Import Lottery</Button>
              </Flex>
            </div> : (lotteryType === 'newLottery' ? <div>
              <Button ml={'auto'} mr={'auto'} mt={10} onClick={createNewLottery}>Create new Lottery</Button>
            </div> : null)}
          </React.Fragment>
          :
          <React.Fragment>
          <Heading fontSize={"4rem"} lineHeight="1.1">
            Welcome to <span className={styles.blue}>Blockchain Lottery</span>
          </Heading>
            <Text >
              Please connect to metamask to continue.
            </Text>
            <div className={styles.inputs}>
              <Button onClick={() => {
                connect({ connector: connectors[0] })
              }}>Connect Wallet</Button>
            </div>
          </React.Fragment>}
      </main>
    </Box>
  )
}
